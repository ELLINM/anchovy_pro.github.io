Server 구성
======
+ 서버 구성은 상당히 복잡한 작업이며 관리자는 소프트웨어 호환성, 용량, 확장 성, 비용 효율성 고려해야함    
  처음에 잘못된 구성을 배포하면 나중에 추가적인 비용이 소모될 가능성이 높음
  

Apace & NGINX
-----
+ 가장 인기있는 웹 서버 중 두 가지는 Apache HTTP와 NGINX 현재 모든 웹 사이트의 50% 이상이 사용중
+ NGINX는 Apache에 비해 더 최신
+ 90년대 후반에서 2011 년까지 아파치는 WWW의 60% 이상을 점유 -> 이후 아파치 시장 점유율이 35% 아래로 떨어짐   
+ 현재 Microsoft IIS 30%, NGINX 16% 특히 NGINX의 시장 점유율은 매년 1% 씩 증가


Apache
-------
+ Apache는 웹 요청 처리 효율성으로 인해 많이 사용됨
+ Apache는 구축 시 단순성으로 유명 특히, http 요청과 관련하여 한 번에 하나의 프로세스를 처리하도록 구축 할 수 있었기 때문에    
  아키텍쳐는 개발자가 아파치에 구축하기가 매우 쉬웠음
+ 현재는 웹 애플리케이션의 복잡성이 증가하면서 아파치 기술에 부담이 가중
+ Apache는 수백 개의 동시 연결을 처리 할 때 어려움이 있음     
  -> 이러한 요청을 처리하기 위해 아파치는 수많은 무거운 스레드와 프로세스를 만듬
+ 각 프로세스는 제한된 시스템 리소스를 사용
+ MPM(Multi Processing Module) 모듈을 통한 시스템 개선, 복잡성 및 보안 문제를 통한 개선
+ 서비스 거부 공격에 매우 취약


NGINX
-----
+ Traffic을 쉽게 흡수하도록 제작
+ Reverse Proxy 또는 독립형 서버로 사용
+ 수천 개의 http 요청을 동시에 처리 할 수 있음
+ 리소스 집약적 인 웹 애플리케이션에 매우 적합
+ 경량 및 맞춤형
+ 입증 된 안정성 기록
+ Facebook, IBM, Google, Adobe 및 LinkedIn을 포함한 일부 대기업에서 사용
+ 보안 취약점과 서비스 거부 공격을 완화
+ 확장 가능 
+ 엄격한 코딩 스타일을 사용하여 실행 효율성을 극대화
+ 다운 타임 제로 제공 및 여러 백엔드 앱 지원


